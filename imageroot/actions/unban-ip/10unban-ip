#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import agent
import os
import subprocess
from concurrent.futures import ThreadPoolExecutor


request = json.load(sys.stdin)
ip = request['ip']
action = request['action']
module_id =  os.environ["MODULE_ID"]

def get_banned_ips():
    """Retrieve all currently banned IPs."""
    result = subprocess.run(
        ["podman", "exec", os.environ['MODULE_ID'], "cscli", "decisions", "list", "-o", "json"],
        capture_output=True,
        text=True,
        check=True
    )
    data = json.loads(result.stdout)
    ips = set()
    for item in data:
        for decision in item.get("decisions", []):
            ip = decision.get("value")
            if ip:
                ips.add(ip)
    return list(ips)

def unban_ip(ip):
    """Remove ban for a single IP."""
    subprocess.run(
        ["podman", "exec", os.environ['MODULE_ID'], "cscli", "decisions", "delete", "-i", ip],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True
    )

if action == 'unban':
    agent.run_helper("podman", "exec", module_id, "cscli", "decision", "delete", "-i", ip).check_returncode()
elif action == 'unban_all':
    # we want to unban only IPs that the local api has banned and keep other decisions from central api (capi)
    ips = get_banned_ips()
    count = len(ips)

    # remove bans in parallel to speed up the process
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.map(unban_ip, ips)

    # log the number of unbanned IPs
    if count > 0:
        print(f"{os.environ['MODULE_ID']} released {count} IPs via unban_all action", file=sys.stderr)
    else:
        print("No IPs were unbanned", file=sys.stderr)
else:
    sys.exit(2)

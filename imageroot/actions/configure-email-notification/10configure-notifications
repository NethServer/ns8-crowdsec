#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import json
import agent
import agent.tasks
import sys

from jinja2 import Environment, FileSystemLoader, select_autoescape

# Try to parse the stdin as JSON.
# If parsing fails, output everything to stderr
data = json.load(sys.stdin)
receiver_emails = data.get("receiver_emails")
agent.set_env("RECEIVER_EMAILS", receiver_emails)

smtp = agent.get_smarthost_settings(agent.redis_connect())
if receiver_emails:
    files =["crowdsec_config/notifications/email.yaml", "crowdsec_config/profiles.yaml.local"]
    for f in files:
        os.remove(f) if os.path.exists(f) else None

    jenv = Environment(
        loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
        autoescape=select_autoescape(),
        keep_trailing_newline=True,
    )
    properties = {
        "smtp_host" : smtp['host'],
        "smtp_username": smtp['username'],
        "smtp_password": smtp['password'],
        "smtp_port": smtp['port'],
        "sender_email": smtp['username'],
        "receiver_emails": receiver_emails.split(","),
        "encryption_type": "none" if smtp['encrypt_smtp'] == "none" else "ssltls",
        "auth_type": "login",
    }
    json_properties = json.dumps(properties)
    template = jenv.get_template('email.yaml')
    output = template.render(json.loads(json_properties))
    with open("crowdsec_config/notifications/email.yaml","w") as f:
        f.write(output)

if smtp['enabled'] and receiver_emails:
    template = jenv.get_template('profiles.yaml.local')
    output = template.render()
    with open("crowdsec_config/profiles.yaml.local","w") as f:
        f.write(output)
else:
    if os.path.isfile("crowdsec_config/profiles.yaml.local"):
        os.remove("crowdsec_config/profiles.yaml.local")

#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import agent
import agent.tasks

from jinja2 import Environment, FileSystemLoader, select_autoescape

def get_sender_email():
    """Return the notification sender address, obtained from environment variables.
    In order of priority consider:
    1. SENDER_EMAIL environment variable (must be a complete email address)
    2. MODULE_ID@HELO_HOST
    3. MODULE_ID@<hostname -f>
    """
    if os.getenv("SENDER_EMAIL"):
        sender_email = os.environ["SENDER_EMAIL"]
    else:
        domain_part = os.getenv("HELO_HOST") or agent.get_hostname()
        sender_email = os.environ['MODULE_ID'] + '@' + domain_part
    return sender_email

helo_host = os.getenv("HELO_HOST") or agent.get_hostname()
receiver_emails = os.environ.get("RECEIVER_EMAILS", "")

smtp = agent.get_smarthost_settings(agent.redis_connect(use_replica=True))

files =["crowdsec_config/notifications/email.yaml"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

if receiver_emails and smtp['enabled']:
    jenv = Environment(
        loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
        autoescape=select_autoescape(),
        keep_trailing_newline=True,
    )
    properties = {
        "smtp_host" : smtp['host'],
        "smtp_username": smtp['username'],
        "smtp_password": smtp['password'],
        "smtp_port": smtp['port'],
        "sender_email": get_sender_email(),
        "receiver_emails": receiver_emails.split(","),
        "encryption_type": "none" if smtp['encrypt_smtp'] == "none" else "starttls" if smtp['encrypt_smtp'] == "starttls" else "ssltls",
        "auth_type": "login",
        "helo_host": helo_host,
        "fqdn": agent.get_hostname(),
        "module_id": os.environ['MODULE_ID'],
        "group_threshold": os.getenv("GROUP_THRESHOLD", 100),
    }
    template = jenv.get_template('email.yaml')
    output = template.render(properties)
    with open("crowdsec_config/notifications/email.yaml","w") as f:
        f.write(output)

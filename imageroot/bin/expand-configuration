#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import agent
import re
import shutil
import sys

from jinja2 import Environment, FileSystemLoader, select_autoescape

# retrieve where crowdsec runs to sort the module for watching only them
node_id = os.environ['NODE_ID']

files =["crowdsec_config/acquis.yaml"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

jenv = Environment(
    loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
    autoescape=select_autoescape(),
    keep_trailing_newline=True,
)

# acquis.yaml is a static file but the first start remove it

template = jenv.get_template('acquis.yaml')
with open("crowdsec_config/acquis.yaml","w") as f:
    f.write(template.render())

# expand config.yaml.local
if True:
    files =["crowdsec_config/config.yaml.local"]
    for f in files:
        try:
            os.remove(f)
        except FileNotFoundError:
            pass

    jenv = Environment(
        loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
        autoescape=select_autoescape(),
        keep_trailing_newline=True,
    )
    ports = os.environ["TCP_PORTS"].split(',')
    properties = {"api_port": ports[0], "metrics_port": ports[1]}

    template = jenv.get_template('config.yaml.local')
    output = template.render(properties)
    with open("crowdsec_config/config.yaml.local","w") as f:
        f.write(output)

## template of local_api_credentials.yaml.local
if True:
    files =["crowdsec_config/local_api_credentials.yaml.local"]
    for f in files:
        try:
            os.remove(f)
        except FileNotFoundError:
            pass

    jenv = Environment(
        loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
        autoescape=select_autoescape(),
        keep_trailing_newline=True,
    )
    ports = os.environ["TCP_PORTS"].split(',')
    template = jenv.get_template('local_api_credentials.yaml.local')
    properties = {"api_port": ports[0]}
    output = template.render(properties)
    with open("crowdsec_config/local_api_credentials.yaml.local","w") as f:
        f.write(output)

# expand profiles.yaml.local
smtp = agent.get_smarthost_settings(agent.redis_connect())
receiver_emails = os.environ.get("RECEIVER_EMAILS", "")

files =["crowdsec_config/profiles.yaml.local"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

properties = {
    "email": True if smtp['enabled'] and receiver_emails else False,
    "bantime": os.environ.get('BANTIME','1')+'m',
    "dyn_bantime": os.environ.get('DYN_BANTIME',"True") == "True",
    "dyn_ban_value": '%d' + ''.join(filter(lambda x: not x.isdigit(), os.environ.get('BANTIME','1')+'m'))
}
template = jenv.get_template('profiles.yaml.local')
output = template.render(properties)
with open("crowdsec_config/profiles.yaml.local","w") as f:
    f.write(output)

# whitelist 
# we want to withelist only fqdn name with crowdsec 1.6.8
# IP/cidr are managed by https://docs.crowdsec.net/docs/next/local_api/centralized_allowlists/

# remove file if exists first
files = [
            "crowdsec_config/postoverflows/s01-whitelist/nethserver-postoverflows-whitelists.yaml"
        ]

for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

# if the Env var exists then write the configuration files
whitelists = os.environ.get("WHITELISTS", "")
if whitelists:
    whitelist_fqdn = []

    # we whitelist only the domain name
    # <re.Match object; span=(0, 8), match='foo.com'>
    # <re.Match object; span=(0, 12), match='12123564.com'>
    # <re.Match object; span=(0, 13), match='foo.foo.com'>
    for test in whitelists.split(','):
        # test domain name
        if re.search(r'([A-Za-z0-9-\.]+\.[A-Za-z]+$)', test):
            whitelist_fqdn.append(test)
        # test if the whitelist is a valid cidr
        elif re.search("./[0-9]+$", test):
            continue
        # test ipv4
        elif re.search(r'([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', test):
            continue
        # test ipv6
        elif re.search(r'(?:[a-zA-Z0-9]{0,4}:?){1,8}|(?:[a-zA-Z0-9]{0,4}:?){1,4}(?:[0-9]{1,3}\.){3}[0-9]{1,3}', test):
            continue
        else:
            print(f"Invalid domain name format: {test}", file=sys.stderr)
            continue

    properties = {
        "whitelist_fqdn": sorted(set(whitelist_fqdn)),
    }

    # whitelist ip/cidr are managed by https://docs.crowdsec.net/docs/next/local_api/centralized_allowlists/

    if properties['whitelist_fqdn']:
        template = jenv.get_template('nethserver-postoverflows-whitelists.yaml')
        output = template.render(properties)
        with open("crowdsec_config/postoverflows/s01-whitelist/nethserver-postoverflows-whitelists.yaml","w") as f:
            f.write(output)

## expand the tainted configuration files
os.makedirs("crowdsec_config/hub/parsers/s01-parse/crowdsecurity", exist_ok=True)
shutil.copyfile("../tainted/nextcloud-logs.yaml", "crowdsec_config/hub/parsers/s01-parse/crowdsecurity/nextcloud-logs.yaml")
shutil.copyfile("../tainted/nethvoice-whitelist-http-probing.yaml", "crowdsec_config/parsers/s02-enrich/nethvoice-whitelist-http-probing.yaml")
# copy the freepbx parser and scenarios
os.makedirs("crowdsec_config/parsers/s01-parse", exist_ok=True)
os.makedirs("crowdsec_config/scenarios", exist_ok=True)
os.makedirs("crowdsec_config/collections", exist_ok=True)
shutil.copyfile("../tainted/freepbx-logs.yaml", "crowdsec_config/parsers/s01-parse/freepbx-logs.yaml")
shutil.copyfile("../tainted/freepbx-user-enum.yaml", "crowdsec_config/scenarios/freepbx-user-enum.yaml")
shutil.copyfile("../tainted/freepbx-bf.yaml", "crowdsec_config/scenarios/freepbx-bf.yaml")
shutil.copyfile("../tainted/custom-auth-logs.yaml", "crowdsec_config/parsers/s01-parse/custom-auth-logs.yaml")
shutil.copyfile("../tainted/custom-auth-bf.yaml", "crowdsec_config/scenarios/custom-auth-bf.yaml")
shutil.copyfile("../tainted/collections-custom-auth.yaml", "crowdsec_config/collections/collections-custom-auth.yaml")
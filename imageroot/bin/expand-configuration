#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import json
import agent
import agent.tasks
import re

from jinja2 import Environment, FileSystemLoader, select_autoescape

# retrieve where crowdsec runs to sort the module for watching only them
node_id = os.environ['NODE_ID']

files =["crowdsec_config/acquis.yaml"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

jenv = Environment(
    loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
    autoescape=select_autoescape(),
    keep_trailing_newline=True,
)

rdb = agent.redis_connect()
modules=[]

# we list all modules, then we search in which node they run and 
# we filter only relevant module on the node
for kenv in rdb.scan_iter(match='module/*/environment'):
    if rdb.hget(kenv, "NODE_ID") == node_id:
        modules.append(kenv.removeprefix("module/").removesuffix("/environment"))

properties = {
    "modules" : modules
}

template = jenv.get_template('acquis.yaml')
output = template.render(properties)
with open("crowdsec_config/acquis.yaml","w") as f:
    f.write(output)

# The first start crowdsec expects other configuration files
# if these files are not present then the service fails to start
# we start the first time with the default configuration
if os.path.isfile("crowdsec_config/config.yaml"):
    files =["crowdsec_config/config.yaml"]
    for f in files:
        try:
            os.remove(f)
        except FileNotFoundError:
            pass

    jenv = Environment(
        loader=FileSystemLoader(os.getenv("AGENT_INSTALL_DIR")+"/templates"),
        autoescape=select_autoescape(),
        keep_trailing_newline=True,
    )
    # placeholder for later
    properties = {}

    template = jenv.get_template('config.yaml')
    output = template.render(properties)
    with open("crowdsec_config/config.yaml","w") as f:
        f.write(output)


# expand profiles.yaml.local
smtp = agent.get_smarthost_settings(agent.redis_connect())
receiver_emails = os.environ.get("RECEIVER_EMAILS", "")

files =["crowdsec_config/profiles.yaml.local"]
for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass

properties = {
    "email": True if smtp['enabled'] and receiver_emails else False,
    "bantime": os.environ.get('BANTIME','1m'),
    "dyn_bantime": os.environ.get('DYN_BANTIME',True),
    "dyn_ban_value": '%d' + ''.join(filter(lambda x: not x.isdigit(), os.environ.get('BANTIME','1m')))
}
template = jenv.get_template('profiles.yaml.local')
output = template.render(properties)
with open("crowdsec_config/profiles.yaml.local","w") as f:
    f.write(output)

# whitelist

# remove file if exists first
files =["crowdsec_config/parsers/s02-enrich/nethserver-parsers-whitelists.yaml","crowdsec_config/postoverflows/s01-whitelists/nethserver-postoverflows-whitelists.yaml"]

for f in files:
    try:
        os.remove(f)
    except FileNotFoundError:
        pass
# if the Env var exists then write the configuration files
whitelists = os.environ.get("WHITELISTS", "")
if whitelists:
    # we want to sort ip, network and reversedns name
    whitelists_ip = []
    whitelists_cidr = []
    whitelist_reversedns = []

    # we whitelist
    # <re.Match object; span=(0, 12), match='10.10.10.0/8'>
    # <re.Match object; span=(0, 7), match='8.8.8.8'>
    # <re.Match object; span=(0, 8), match='foo.com'>
    # <re.Match object; span=(0, 12), match='12123564.com'>
    # <re.Match object; span=(0, 13), match='foo.foo.com'>

    for test in whitelists.split(','):
        reversedns = re.search(r'([A-Za-z0-9-.]+.[A-Za-z]+)', test)
        if reversedns:
            whitelist_reversedns.append(test)
            continue

        network = re.search(r'([0-9]+.[0-9]+.[0-9]+.[0-9]+/[0-9])', test)
        if network:
            whitelists_cidr.append(test)
            continue

        ip = re.search(r'([0-9]+.[0-9]+.[0-9]+.[0-9]+)', test)
        if ip:
            whitelists_ip.append(test)
            continue

    properties = {
        "whitelists_ip": whitelists_ip,
        "whitelists_cidr": whitelists_cidr,
        "whitelist_reversedns": whitelist_reversedns,
    }
    # create the folder if not exists
    try:
        os.mkdir("crowdsec_config/parsers/s02-enrich")
    except OSError:
       pass
    # write the template
    if properties['whitelists_ip'] or  properties['whitelists_cidr']:
        template = jenv.get_template('nethserver-parsers-whitelists.yaml')
        output = template.render(properties)
        with open("crowdsec_config/parsers/s02-enrich/nethserver-parsers-whitelists.yaml","w") as f:
            f.write(output)

    # create the folder if not exists
    try:
        os.mkdir("crowdsec_config/postoverflows/s01-whitelists")
    except OSError:
       pass
    # write the template
    if properties['whitelist_reversedns']:
        template = jenv.get_template('nethserver-postoverflows-whitelists.yaml')
        output = template.render(properties)
        with open("crowdsec_config/postoverflows/s01-whitelists/nethserver-postoverflows-whitelists.yaml","w") as f:
            f.write(output)
